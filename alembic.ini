# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding --with-timezones to the [alembic] section
# of setup.cfg
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar %(here)s/bat alembic/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :  # Use a colon (for PATH-style strings)
# version_path_separator = ;  # Use a semicolon (for PATH-style strings)
# version_path_separator = /  # Use a forward slash (for relative or absolute paths)
# version_path_separator = os  # Use the operating system's default path separator
# version_path_separator = space  # Split on spaces (default if version_path_separator is omitted)
# version_path_separator = comma  # Split on commas (legacy behavior)

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/solarview


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# lint with flake8 - use the console_scripts runner, against the flake8 entrypoint
# hooks=flake8
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79

# format using "black" - use the exec runner, with a direct import path
# hooks=black
# black.type=exec
# black.options=-l 79
# black.import_path=black

# lint with flake8 - use the exec runner, with a direct import path
# hooks=flake8
# flake8.type=exec
# flake8.options=--max-line-length=79
# flake8.import_path=flake8.api.legacy

# lint with flake8 - use the exec runner, with a direct import path and arguments as a string
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config=setup.cfg .

# lint with flake8 - use the exec runner, with a direct import path and arguments as a list
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config setup.cfg .
# flake8.arg_type=list

# lint with flake8 - use the exec runner, with a direct import path and arguments as a list of strings
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config setup.cfg .
# flake8.arg_type=string_list

# lint with flake8 - use the exec runner, with a direct import path and arguments as a list of strings
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config setup.cfg .
# flake8.arg_type=string_list

# lint with flake8 - use the exec runner, with a direct import path and arguments as a list of strings
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config setup.cfg .
# flake8.arg_type=string_list

# lint with flake8 - use the exec runner, with a direct import path and arguments as a list of strings
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config setup.cfg .
# flake8.arg_type=string_list

# lint with flake8 - use the exec runner, with a direct import path and arguments as a list of strings
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config setup.cfg .
# flake8.arg_type=string_list

# lint with flake8 - use the exec runner, with a direct import path and arguments as a list of strings
# hooks=flake8
# flake8.type=exec
# flake8.import_path=flake8.main.application.Application
# flake8.entrypoint=main
# flake8.options=--config setup.cfg .
# flake8.arg_type=string_list
